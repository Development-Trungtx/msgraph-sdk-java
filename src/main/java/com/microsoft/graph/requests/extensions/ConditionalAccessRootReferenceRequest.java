// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.ConditionalAccessRoot;
import com.microsoft.graph.requests.extensions.INamedLocationCollectionRequestBuilder;
import com.microsoft.graph.requests.extensions.INamedLocationRequestBuilder;
import com.microsoft.graph.requests.extensions.NamedLocationCollectionRequestBuilder;
import com.microsoft.graph.requests.extensions.NamedLocationRequestBuilder;
import com.microsoft.graph.requests.extensions.IConditionalAccessPolicyCollectionRequestBuilder;
import com.microsoft.graph.requests.extensions.IConditionalAccessPolicyRequestBuilder;
import com.microsoft.graph.requests.extensions.ConditionalAccessPolicyCollectionRequestBuilder;
import com.microsoft.graph.requests.extensions.ConditionalAccessPolicyRequestBuilder;
import java.util.Arrays;
import java.util.EnumSet;

import com.microsoft.graph.options.QueryOption;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;
import com.microsoft.graph.core.IBaseClient;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Conditional Access Root Reference Request.
 */
public class ConditionalAccessRootReferenceRequest extends BaseRequest implements IConditionalAccessRootReferenceRequest {

    /**
     * The request for the ConditionalAccessRoot
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public ConditionalAccessRootReferenceRequest(String requestUrl, IBaseClient client, java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, ConditionalAccessRoot.class);
    }

    public void delete(final ICallback<? super ConditionalAccessRoot> callback) {
        send(HttpMethod.DELETE, callback, null);
    }

    public ConditionalAccessRoot delete() throws ClientException {
       return send(HttpMethod.DELETE, null);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public IConditionalAccessRootReferenceRequest select(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return (ConditionalAccessRootReferenceRequest)this;
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public IConditionalAccessRootReferenceRequest expand(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (ConditionalAccessRootReferenceRequest)this;
    }
    /**
     * Puts the ConditionalAccessRoot
     *
     * @param srcConditionalAccessRoot the ConditionalAccessRoot reference to PUT
     * @param callback the callback to be called after success or failure
     */
    public void put(ConditionalAccessRoot srcConditionalAccessRoot, final ICallback<? super ConditionalAccessRoot> callback) {
        send(HttpMethod.PUT, callback, srcConditionalAccessRoot);
    }

    /**
     * Puts the ConditionalAccessRoot
     *
     * @param srcConditionalAccessRoot the ConditionalAccessRoot reference to PUT
     * @return the ConditionalAccessRoot
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public ConditionalAccessRoot put(ConditionalAccessRoot srcConditionalAccessRoot) throws ClientException {
        return send(HttpMethod.PUT, srcConditionalAccessRoot);
    }
}
