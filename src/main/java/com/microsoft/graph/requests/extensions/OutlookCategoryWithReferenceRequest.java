// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.OutlookCategory;
import java.util.Arrays;
import java.util.EnumSet;

import com.microsoft.graph.options.QueryOption;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.serializer.IJsonBackedObject;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Outlook Category With Reference Request.
 */
public class OutlookCategoryWithReferenceRequest extends BaseRequest implements IOutlookCategoryWithReferenceRequest {

    /**
     * The request for the OutlookCategory
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public OutlookCategoryWithReferenceRequest(String requestUrl, IBaseClient client, java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, OutlookCategory.class);
    }

    public void post(final OutlookCategory newOutlookCategory, final IJsonBackedObject payload, final ICallback<? super OutlookCategory> callback) {
        send(HttpMethod.POST, callback, payload);
    }

    public OutlookCategory post(final OutlookCategory newOutlookCategory, final IJsonBackedObject payload) throws ClientException {
        IJsonBackedObject response = send(HttpMethod.POST, payload);
        if (response != null){
            return newOutlookCategory;
        }
        return null;
    }

    public void get(final ICallback<? super OutlookCategory> callback) {
        send(HttpMethod.GET, callback, null);
    }

    public OutlookCategory get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

	public void delete(final ICallback<? super OutlookCategory> callback) {
		send(HttpMethod.DELETE, callback, null);
	}

	public void delete() throws ClientException {
		send(HttpMethod.DELETE, null);
	}

	public void patch(final OutlookCategory sourceOutlookCategory, final ICallback<? super OutlookCategory> callback) {
		send(HttpMethod.PATCH, callback, sourceOutlookCategory);
	}

	public OutlookCategory patch(final OutlookCategory sourceOutlookCategory) throws ClientException {
		return send(HttpMethod.PATCH, sourceOutlookCategory);
	}


    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public IOutlookCategoryWithReferenceRequest select(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return (IOutlookCategoryWithReferenceRequest)this;
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public IOutlookCategoryWithReferenceRequest expand(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (OutlookCategoryWithReferenceRequest)this;
    }
}
