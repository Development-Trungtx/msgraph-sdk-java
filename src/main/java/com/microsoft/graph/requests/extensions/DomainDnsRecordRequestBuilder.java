// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.DomainDnsRecord;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Domain Dns Record Request Builder.
 */
public class DomainDnsRecordRequestBuilder extends BaseRequestBuilder implements IDomainDnsRecordRequestBuilder {

    /**
     * The request builder for the DomainDnsRecord
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public DomainDnsRecordRequestBuilder(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the IDomainDnsRecordRequest instance
     */
    public IDomainDnsRecordRequest buildRequest(final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for this request
     * @return the IDomainDnsRecordRequest instance
     */
    public IDomainDnsRecordRequest buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        return new com.microsoft.graph.requests.extensions.DomainDnsRecordRequest(getRequestUrl(), getClient(), requestOptions);
    }



    /**
     * Performs an OData cast on the entity
     *
     * @return the entity cast to the DomainDnsCnameRecord type
     */
    public IDomainDnsCnameRecordRequestBuilder castToDomainDnsCnameRecord() {
        return new DomainDnsCnameRecordRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.domainDnsCnameRecord"), getClient(), null);
    }

    /**
     * Performs an OData cast on the entity
     *
     * @return the entity cast to the DomainDnsMxRecord type
     */
    public IDomainDnsMxRecordRequestBuilder castToDomainDnsMxRecord() {
        return new DomainDnsMxRecordRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.domainDnsMxRecord"), getClient(), null);
    }

    /**
     * Performs an OData cast on the entity
     *
     * @return the entity cast to the DomainDnsSrvRecord type
     */
    public IDomainDnsSrvRecordRequestBuilder castToDomainDnsSrvRecord() {
        return new DomainDnsSrvRecordRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.domainDnsSrvRecord"), getClient(), null);
    }

    /**
     * Performs an OData cast on the entity
     *
     * @return the entity cast to the DomainDnsTxtRecord type
     */
    public IDomainDnsTxtRecordRequestBuilder castToDomainDnsTxtRecord() {
        return new DomainDnsTxtRecordRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.domainDnsTxtRecord"), getClient(), null);
    }

    /**
     * Performs an OData cast on the entity
     *
     * @return the entity cast to the DomainDnsUnavailableRecord type
     */
    public IDomainDnsUnavailableRecordRequestBuilder castToDomainDnsUnavailableRecord() {
        return new DomainDnsUnavailableRecordRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.domainDnsUnavailableRecord"), getClient(), null);
    }
}
